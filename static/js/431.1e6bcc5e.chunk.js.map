{"version":3,"file":"static/js/431.1e6bcc5e.chunk.js","mappings":"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","sources":["components/3D/Asteroid3D.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Html } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Detailed asteroid component with surface features\nconst DetailedAsteroid = ({ asteroidData, scale = 1 }) => {\n  const asteroidRef = useRef();\n  const [hovered, setHovered] = useState(false);\n\n  useFrame(() => {\n    if (asteroidRef.current) {\n      asteroidRef.current.rotation.y += 0.005;\n      asteroidRef.current.rotation.x += 0.002;\n    }\n  });\n\n  // Calculate asteroid properties\n  const diameter = asteroidData?.diameter || 1000; // meters\n  const displaySize = Math.max(0.5, Math.min(3, diameter / 1000)) * scale;\n  const mass = asteroidData?.mass || (4/3 * Math.PI * Math.pow(diameter/2, 3) * 2700); // kg, assuming rock density\n  const velocity = asteroidData?.velocity || 20; // km/s\n\n  // Create irregular shape with noise\n  const createAsteroidGeometry = () => {\n    const geometry = new THREE.IcosahedronGeometry(1, 2);\n    const vertices = geometry.attributes.position.array;\n    \n    // Add noise to create irregular surface\n    for (let i = 0; i < vertices.length; i += 3) {\n      const vertex = new THREE.Vector3(vertices[i], vertices[i + 1], vertices[i + 2]);\n      const noise = Math.random() * 0.3 + 0.8; // Vary between 0.8 and 1.1\n      vertex.multiplyScalar(noise);\n      vertices[i] = vertex.x;\n      vertices[i + 1] = vertex.y;\n      vertices[i + 2] = vertex.z;\n    }\n    \n    geometry.computeVertexNormals();\n    return geometry;\n  };\n\n  return (\n    <group\n      ref={asteroidRef}\n      onPointerOver={() => setHovered(true)}\n      onPointerOut={() => setHovered(false)}\n      scale={hovered ? displaySize * 1.1 : displaySize}\n    >\n      {/* Main asteroid body */}\n      <mesh geometry={createAsteroidGeometry()}>\n        <meshStandardMaterial\n          color=\"#8B4513\"\n          roughness={0.9}\n          metalness={0.1}\n          bumpScale={0.3}\n        />\n      </mesh>\n      \n      {/* Surface details - craters */}\n      {[...Array(5)].map((_, i) => {\n        const angle = (i / 5) * Math.PI * 2;\n        const position = [\n          Math.cos(angle) * 0.8,\n          Math.sin(angle) * 0.3,\n          Math.sin(angle) * 0.8\n        ];\n        \n        return (\n          <mesh key={i} position={position} scale={0.1}>\n            <sphereGeometry args={[1, 8, 8]} />\n            <meshStandardMaterial\n              color=\"#654321\"\n              transparent\n              opacity={0.7}\n            />\n          </mesh>\n        );\n      })}\n      \n      {/* Asteroid info overlay */}\n      {hovered && (\n        <Html position={[2, 1, 0]} occlude>\n          <div style={{\n            background: 'rgba(0, 0, 0, 0.9)',\n            color: '#ffffff',\n            padding: '12px',\n            borderRadius: '8px',\n            fontSize: '14px',\n            minWidth: '250px',\n            border: '1px solid #00d4ff'\n          }}>\n            <h6 style={{ margin: '0 0 8px 0', color: '#00d4ff' }}>\n              {asteroidData?.name || 'Asteroid Details'}\n            </h6>\n            <div style={{ marginBottom: '4px' }}>\n              <strong>Diameter:</strong> {(diameter / 1000).toFixed(2)} km\n            </div>\n            <div style={{ marginBottom: '4px' }}>\n              <strong>Mass:</strong> {(mass / 1e15).toExponential(2)} × 10¹⁵ kg\n            </div>\n            <div style={{ marginBottom: '4px' }}>\n              <strong>Velocity:</strong> {velocity.toFixed(2)} km/s\n            </div>\n            <div style={{ marginBottom: '4px' }}>\n              <strong>Kinetic Energy:</strong> {((0.5 * mass * Math.pow(velocity * 1000, 2)) / 1e15).toExponential(2)} PJ\n            </div>\n            {asteroidData?.is_potentially_hazardous_asteroid && (\n              <div style={{ \n                color: '#ff4444', \n                fontWeight: 'bold',\n                marginTop: '8px',\n                padding: '4px 8px',\n                background: 'rgba(255, 68, 68, 0.2)',\n                borderRadius: '4px'\n              }}>\n                ⚠️ POTENTIALLY HAZARDOUS\n              </div>\n            )}\n          </div>\n        </Html>\n      )}\n    </group>\n  );\n};\n\n// Trajectory visualization\nconst Trajectory = ({ startPosition, endPosition, progress = 0 }) => {\n  const points = [];\n  const segments = 50;\n  \n  for (let i = 0; i <= segments; i++) {\n    const t = i / segments;\n    const point = new THREE.Vector3().lerpVectors(\n      new THREE.Vector3(...startPosition),\n      new THREE.Vector3(...endPosition),\n      t\n    );\n    points.push(point);\n  }\n  \n  const curve = new THREE.CatmullRomCurve3(points);\n  const tubeGeometry = new THREE.TubeGeometry(curve, segments, 0.02, 8, false);\n  \n  return (\n    <mesh geometry={tubeGeometry}>\n      <meshStandardMaterial\n        color=\"#ffaa00\"\n        transparent\n        opacity={0.6}\n        emissive=\"#ff6600\"\n        emissiveIntensity={0.3}\n      />\n    </mesh>\n  );\n};\n\n// Comparison scale component\nconst ScaleReference = ({ asteroidSize }) => {\n  return (\n    <group position={[4, -2, 0]}>\n      {/* Earth reference */}\n      <mesh position={[-1, 0, 0]}>\n        <sphereGeometry args={[0.3, 16, 16]} />\n        <meshStandardMaterial color=\"#4A90E2\" />\n      </mesh>\n      \n      {/* Asteroid */}\n      <mesh position={[1, 0, 0]}>\n        <sphereGeometry args={[asteroidSize * 0.3, 16, 16]} />\n        <meshStandardMaterial color=\"#8B4513\" />\n      </mesh>\n      \n      {/* Labels */}\n      <Html position={[-1, -0.5, 0]}>\n        <div style={{ color: '#cccccc', fontSize: '10px', textAlign: 'center' }}>\n          Earth<br/>(Reference)\n        </div>\n      </Html>\n      \n      <Html position={[1, -0.5, 0]}>\n        <div style={{ color: '#cccccc', fontSize: '10px', textAlign: 'center' }}>\n          Asteroid<br/>(To Scale)\n        </div>\n      </Html>\n    </group>\n  );\n};\n\n// Main Asteroid3D component\nconst Asteroid3D = ({ asteroidData, showComparison = true, showTrajectory = false }) => {\n  return (\n    <div style={{ \n      width: '100%', \n      height: '500px', \n      borderRadius: '12px', \n      overflow: 'hidden',\n      background: 'linear-gradient(135deg, #0a0a0a 0%, #1a1a2e 100%)'\n    }}>\n      <Canvas camera={{ position: [0, 0, 6], fov: 50 }}>\n        {/* Lighting setup */}\n        <ambientLight intensity={0.4} />\n        <directionalLight position={[5, 5, 5]} intensity={1} castShadow />\n        <pointLight position={[-5, 0, 5]} intensity={0.3} color=\"#4A90E2\" />\n        <spotLight \n          position={[0, 5, 0]} \n          intensity={0.5} \n          angle={Math.PI / 4}\n          penumbra={0.1}\n          castShadow\n        />\n        \n        {/* Star field background */}\n        <mesh>\n          <sphereGeometry args={[50, 32, 32]} />\n          <meshBasicMaterial \n            color=\"#000011\" \n            side={THREE.BackSide}\n            transparent\n            opacity={0.8}\n          />\n        </mesh>\n        \n        {/* Main asteroid */}\n        <DetailedAsteroid asteroidData={asteroidData} scale={1} />\n        \n        {/* Scale comparison */}\n        {showComparison && (\n          <ScaleReference \n            asteroidSize={Math.max(0.1, Math.min(1, (asteroidData?.diameter || 1000) / 10000))} \n          />\n        )}\n        \n        {/* Trajectory path */}\n        {showTrajectory && (\n          <Trajectory\n            startPosition={[8, 4, 6]}\n            endPosition={[0, 0, 0]}\n            progress={0}\n          />\n        )}\n        \n        {/* Controls */}\n        <OrbitControls\n          enableZoom={true}\n          enablePan={true}\n          enableRotate={true}\n          minDistance={2}\n          maxDistance={20}\n          autoRotate={true}\n          autoRotateSpeed={1}\n        />\n        \n        {/* Asteroid statistics */}\n        <Html position={[-4, 3, 0]}>\n          <div style={{\n            background: 'rgba(0, 0, 0, 0.8)',\n            color: '#ffffff',\n            padding: '12px',\n            borderRadius: '8px',\n            fontSize: '12px',\n            minWidth: '200px',\n            border: '1px solid #00d4ff'\n          }}>\n            <h6 style={{ margin: '0 0 8px 0', color: '#00d4ff' }}>\n              Asteroid Analysis\n            </h6>\n            <div>Name: {asteroidData?.name || 'Unknown'}</div>\n            <div>Type: Near-Earth Asteroid</div>\n            <div>Composition: Rocky/Metallic</div>\n            <div>Discovery: {asteroidData?.discovery_date || 'Historical'}</div>\n            <div style={{ marginTop: '8px', fontSize: '10px', color: '#cccccc' }}>\n              🖱️ Click and drag to rotate<br/>\n              🔍 Scroll to zoom in/out<br/>\n              🎯 Hover for details\n            </div>\n          </div>\n        </Html>\n      </Canvas>\n    </div>\n  );\n};\n\nexport default Asteroid3D;\n"],"names":["DetailedAsteroid","_ref","asteroidData","scale","asteroidRef","useRef","hovered","setHovered","useState","useFrame","current","rotation","y","x","diameter","displaySize","Math","max","min","mass","PI","pow","velocity","_jsxs","ref","onPointerOver","onPointerOut","children","_jsx","geometry","createAsteroidGeometry","THREE","vertices","attributes","position","array","i","length","vertex","noise","random","multiplyScalar","z","computeVertexNormals","color","roughness","metalness","bumpScale","Array","map","_","angle","cos","sin","args","transparent","opacity","Html","occlude","style","background","padding","borderRadius","fontSize","minWidth","border","margin","name","marginBottom","toFixed","toExponential","is_potentially_hazardous_asteroid","fontWeight","marginTop","Trajectory","_ref2","startPosition","endPosition","progress","points","t","point","lerpVectors","push","curve","tubeGeometry","emissive","emissiveIntensity","ScaleReference","_ref3","asteroidSize","textAlign","_ref4","showComparison","showTrajectory","width","height","overflow","Canvas","camera","fov","intensity","castShadow","penumbra","side","OrbitControls","enableZoom","enablePan","enableRotate","minDistance","maxDistance","autoRotate","autoRotateSpeed","discovery_date"],"sourceRoot":""}