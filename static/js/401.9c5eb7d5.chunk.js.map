{"version":3,"file":"static/js/401.9c5eb7d5.chunk.js","mappings":"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","sources":["components/3D/WorkingEnhancedImpact3D.js"],"sourcesContent":["import React, { useRef, useState, useEffect, useMemo, useCallback } from 'react';\nimport { Canvas, useFrame, useThree } from '@react-three/fiber';\nimport { OrbitControls, Html, PerspectiveCamera, useTexture } from '@react-three/drei';\nimport * as THREE from 'three';\n\n/**\n * Enhanced Earth Component with Realistic Materials and Effects\n */\nconst EnhancedEarth = React.memo(({ \n  impactLocation, \n  showImpact = false, \n  animationPhase = 'idle',\n  impactProgress = 0,\n  materialSettings = {}\n}) => {\n  const earthRef = useRef();\n  const atmosphereRef = useRef();\n  const impactMarkerRef = useRef();\n  const cloudsRef = useRef();\n\n  // Load textures\n  const [earthColorMap, earthNormalMap, earthClouds] = useTexture([\n    'https://threejs.org/examples/textures/planets/earth_atmos_2048.jpg',\n    'https://threejs.org/examples/textures/planets/earth_normal_2048.jpg',\n    'https://threejs.org/examples/textures/planets/earth_clouds_1024.png'\n  ]);\n\n  // Create Earth material with textures\n  const earthMaterial = useMemo(() => {\n    const mat = new THREE.MeshStandardMaterial({\n      map: earthColorMap,\n      normalMap: earthNormalMap,\n      roughness: 0.85,\n      metalness: 0.0\n    });\n    return mat;\n  }, [earthColorMap, earthNormalMap]);\n\n  // Create atmosphere effect\n  const atmosphereMaterial = useMemo(() => {\n    return new THREE.MeshBasicMaterial({\n      color: '#87CEEB',\n      transparent: true,\n      opacity: 0.1,\n      side: THREE.BackSide\n    });\n  }, []);\n\n  // Impact location marker\n  const impactMarkerPosition = useMemo(() => {\n    if (!impactLocation) return [0, 0, 2.1];\n    \n    // Convert lat/lng to 3D coordinates on sphere\n    const lat = (impactLocation.lat * Math.PI) / 180;\n    const lng = (impactLocation.lng * Math.PI) / 180;\n    const radius = 2.05;\n    \n    const x = radius * Math.cos(lat) * Math.cos(lng);\n    const y = radius * Math.sin(lat);\n    const z = radius * Math.cos(lat) * Math.sin(lng);\n    \n    return [x, y, z];\n  }, [impactLocation]);\n\n  // Tangent-space group orientation at impact point\n  const impactOrientation = useMemo(() => {\n    const normal = new THREE.Vector3(...impactMarkerPosition).normalize();\n    const quat = new THREE.Quaternion();\n    // Align +Z to the surface normal\n    quat.setFromUnitVectors(new THREE.Vector3(0, 0, 1), normal);\n    return quat;\n  }, [impactMarkerPosition]);\n\n  // Animation effects based on phase\n  useFrame((state) => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.005; // Slow rotation\n    }\n    \n    if (atmosphereRef.current) {\n      atmosphereRef.current.rotation.y += 0.003;\n    }\n    // Rotate cloud layer slightly faster\n    if (cloudsRef.current) {\n      cloudsRef.current.rotation.y += 0.006;\n    }\n\n    // Pulse effect for impact marker during impact phases\n    if (impactMarkerRef.current && (animationPhase === 'impact' || animationPhase === 'explosion')) {\n      const scale = 1 + Math.sin(state.clock.elapsedTime * 10) * 0.3;\n      impactMarkerRef.current.scale.setScalar(scale);\n    }\n  });\n\n  return (\n    <group>\n      {/* Main Earth sphere */}\n      <mesh ref={earthRef} material={earthMaterial}>\n        <sphereGeometry args={[2, 64, 32]} />\n      </mesh>\n      \n      {/* Cloud layer */}\n      <mesh ref={cloudsRef}>\n        <sphereGeometry args={[2.03, 64, 32]} />\n        <meshPhongMaterial\n          map={earthClouds}\n          transparent\n          opacity={0.4}\n          depthWrite={false}\n        />\n      </mesh>\n\n      {/* Atmosphere */}\n      <mesh ref={atmosphereRef} material={atmosphereMaterial}>\n        <sphereGeometry args={[2.1, 32, 16]} />\n      </mesh>\n      \n      {/* Impact location marker */}\n      {impactLocation && (\n        <mesh ref={impactMarkerRef} position={impactMarkerPosition}>\n          <sphereGeometry args={[0.05, 8, 8]} />\n          <meshBasicMaterial \n            color={showImpact ? \"#ff4444\" : \"#ffff44\"}\n            transparent\n            opacity={0.8}\n          />\n        </mesh>\n      )}\n      \n      {/* Crater and Shockwave on surface */}\n      {impactLocation && (animationPhase === 'impact' || animationPhase === 'explosion' || animationPhase === 'aftermath') && (\n        <group position={impactMarkerPosition}>\n          {/* Orient the group so +Z points along surface normal */}\n          <primitive object={new THREE.AxesHelper(0)} visible={false} />\n          <group quaternion={impactOrientation}>\n            {/* Crater: shallow disc that appears at impact and persists */}\n            <mesh position={[0, 0, -0.02]}>\n              <cylinderGeometry args={[0.0, 0.22, 0.06, 24]} />\n              <meshStandardMaterial color=\"#6b3e2e\" roughness={1} metalness={0} />\n            </mesh>\n\n            {/* Shockwave ring: expands quickly */}\n            {(animationPhase === 'impact' || animationPhase === 'explosion') && (\n              <mesh>\n                <ringGeometry args={[0.25 + impactProgress * 0.8, 0.27 + impactProgress * 0.85, 64]} />\n                <meshBasicMaterial color=\"#ffaa00\" transparent opacity={0.6 - impactProgress * 0.5} side={THREE.DoubleSide} />\n              </mesh>\n            )}\n\n            {/* Tsunami ring: slower, larger, bluish */}\n            {(animationPhase === 'explosion' || animationPhase === 'aftermath') && (\n              <mesh>\n                <ringGeometry args={[0.3 + impactProgress * 1.2, 0.34 + impactProgress * 1.22, 96]} />\n                <meshBasicMaterial color=\"#1e90ff\" transparent opacity={0.35 - Math.max(0, (impactProgress - 0.3)) * 0.3} side={THREE.DoubleSide} />\n              </mesh>\n            )}\n          </group>\n        </group>\n      )}\n    </group>\n  );\n});\n\n/**\n * Enhanced Asteroid Component\n */\nconst EnhancedAsteroid = React.memo(({ \n  asteroidData, \n  position = [0, 0, 5],\n  animationPhase = 'idle',\n  animationProgress = 0\n}) => {\n  const asteroidRef = useRef();\n  const trailRef = useRef();\n\n  // Get asteroid properties\n  const asteroidSize = asteroidData?.estimatedDiameter?.kilometers?.estimated_diameter_max || 0.1;\n  const scaledSize = Math.max(0.05, Math.min(asteroidSize * 0.1, 0.5));\n  \n  // Create asteroid material\n  const asteroidMaterial = useMemo(() => {\n    return new THREE.MeshStandardMaterial({\n      color: '#8B4513',\n      roughness: 0.8,\n      metalness: 0.1,\n      bumpScale: 0.05\n    });\n  }, []);\n\n  // Plasma trail material\n  const trailMaterial = useMemo(() => {\n    return new THREE.MeshBasicMaterial({\n      color: '#ff6600',\n      transparent: true,\n      opacity: 0.6\n    });\n  }, []);\n\n  // Animation effects\n  useFrame((state) => {\n    if (asteroidRef.current) {\n      // Rotation\n      asteroidRef.current.rotation.x += 0.02;\n      asteroidRef.current.rotation.y += 0.01;\n      \n      // Heat glow effect during approach\n      if (animationPhase === 'approaching' && asteroidMaterial) {\n        const glowIntensity = animationProgress * 2;\n        asteroidMaterial.emissive.setRGB(\n          glowIntensity * 0.5, \n          glowIntensity * 0.2, \n          0\n        );\n      }\n    }\n  });\n\n  return (\n    <group position={position}>\n      {/* Main asteroid */}\n      <mesh ref={asteroidRef} material={asteroidMaterial}>\n        <sphereGeometry args={[scaledSize, 16, 8]} />\n      </mesh>\n      \n      {/* Plasma trail (during approach) */}\n      {animationPhase === 'approaching' && (\n        <mesh ref={trailRef} position={[0, 0, scaledSize * 2]}>\n          <coneGeometry args={[scaledSize * 0.3, scaledSize * 3, 8]} />\n          <primitive object={trailMaterial} />\n        </mesh>\n      )}\n    </group>\n  );\n});\n\n/**\n * Simple Particle Effects\n */\nconst SimpleParticleEffects = ({ \n  position = [0, 0, 2], \n  animationPhase = 'idle',\n  animationProgress = 0 \n}) => {\n  const explosionRef = useRef();\n  const debrisRef = useRef();\n\n  // Explosion effect\n  const explosionScale = useMemo(() => {\n    if (animationPhase === 'impact') return animationProgress * 2;\n    if (animationPhase === 'explosion') return 1 + animationProgress;\n    return 0;\n  }, [animationPhase, animationProgress]);\n\n  // Debris particles\n  const debrisParticles = useMemo(() => {\n    const particles = [];\n    for (let i = 0; i < 20; i++) {\n      const angle = (i / 20) * Math.PI * 2;\n      const radius = 0.3 + Math.random() * 0.7;\n      particles.push({\n        position: [\n          Math.cos(angle) * radius,\n          Math.random() * 0.5,\n          Math.sin(angle) * radius\n        ],\n        scale: 0.02 + Math.random() * 0.03\n      });\n    }\n    return particles;\n  }, []);\n\n  return (\n    <group position={position}>\n      {/* Explosion sphere */}\n      {explosionScale > 0 && (\n        <mesh ref={explosionRef} scale={explosionScale}>\n          <sphereGeometry args={[0.3, 16, 8]} />\n          <meshBasicMaterial\n            color=\"#ff8800\"\n            transparent\n            opacity={0.7 - animationProgress * 0.5}\n          />\n        </mesh>\n      )}\n      \n      {/* Debris particles */}\n      {animationPhase === 'explosion' && debrisParticles.map((particle, index) => (\n        <mesh\n          key={index}\n          position={particle.position.map(p => p * animationProgress)}\n          scale={particle.scale}\n        >\n          <sphereGeometry args={[1, 4, 4]} />\n          <meshBasicMaterial color=\"#8B4513\" />\n        </mesh>\n      ))}\n    </group>\n  );\n};\n\n/**\n * Animation Controller Hook\n */\nconst useEnhancedAnimation = (animate, onComplete, impactLocation) => {\n  const [phase, setPhase] = useState('idle');\n  const [progress, setProgress] = useState(0);\n  const [asteroidPosition, setAsteroidPosition] = useState([0, 0, 8]);\n\n  // Compute target point on Earth surface from impactLocation\n  const targetPoint = useMemo(() => {\n    if (!impactLocation) return new THREE.Vector3(0, 0, 2);\n    const lat = (impactLocation.lat * Math.PI) / 180;\n    const lng = (impactLocation.lng * Math.PI) / 180;\n    const radius = 2.05;\n    const x = radius * Math.cos(lat) * Math.cos(lng);\n    const y = radius * Math.sin(lat);\n    const z = radius * Math.cos(lat) * Math.sin(lng);\n    return new THREE.Vector3(x, y, z);\n  }, [impactLocation]);\n\n  // Define start point far away in the direction of target normal\n  const startPoint = useMemo(() => {\n    const dir = targetPoint.clone().normalize();\n    return dir.multiplyScalar(8); // far start\n  }, [targetPoint]);\n\n  useEffect(() => {\n    if (!animate) {\n      setPhase('idle');\n      setProgress(0);\n      setAsteroidPosition([0, 0, 8]);\n      return;\n    }\n\n    let animationId;\n    let startTime = Date.now();\n    const duration = 9000; // 9 seconds total\n\n    const animateStep = () => {\n      const elapsed = Date.now() - startTime;\n      const newProgress = Math.min(elapsed / duration, 1);\n      \n      setProgress(newProgress);\n\n      // Update phases and positions based on progress\n      if (newProgress < 0.45) {\n        setPhase('approaching');\n        const t = newProgress / 0.45;\n        // Ease-in approach along straight line toward target point\n        const ease = t * t;\n        const pos = new THREE.Vector3().lerpVectors(startPoint, targetPoint, ease);\n        setAsteroidPosition([pos.x, pos.y, pos.z + 0]);\n      } else if (newProgress < 0.55) {\n        setPhase('impact');\n        setAsteroidPosition([targetPoint.x, targetPoint.y, targetPoint.z]);\n      } else if (newProgress < 0.85) {\n        setPhase('explosion');\n        setAsteroidPosition([targetPoint.x, targetPoint.y, targetPoint.z]);\n      } else if (newProgress < 1) {\n        setPhase('aftermath');\n        setAsteroidPosition([targetPoint.x, targetPoint.y, targetPoint.z]);\n      } else {\n        setPhase('complete');\n        if (onComplete) onComplete();\n        return;\n      }\n\n      animationId = requestAnimationFrame(animateStep);\n    };\n\n    animationId = requestAnimationFrame(animateStep);\n\n    return () => {\n      if (animationId) {\n        cancelAnimationFrame(animationId);\n      }\n    };\n  }, [animate, onComplete]);\n\n  return { phase, progress, asteroidPosition };\n};\n\n/**\n * Main Enhanced Impact Scene\n */\nconst EnhancedImpactScene = ({ \n  simulationData, \n  onAnimationComplete \n}) => {\n  const { \n    impactData, \n    asteroidData, \n    impactLocation, \n    impactAngle = 45,\n    impactVelocity = 20,\n    animate = false \n  } = simulationData || {};\n\n  const { phase, progress, asteroidPosition } = useEnhancedAnimation(animate, onAnimationComplete, impactLocation);\n\n  // Camera controls\n  const { camera } = useThree();\n  \n  useFrame(() => {\n    // Dynamic camera positioning based on animation phase\n    if (phase === 'approaching') {\n      camera.position.lerp(new THREE.Vector3(5, 3, 5), 0.02);\n      camera.lookAt(0, 0, 0);\n    } else if (phase === 'impact' || phase === 'explosion') {\n      camera.position.lerp(new THREE.Vector3(3, 2, 3), 0.02);\n      camera.lookAt(0, 0, 2);\n    }\n  });\n\n  return (\n    <>\n      {/* Enhanced Lighting */}\n      <ambientLight intensity={0.3} color=\"#ffffff\" />\n      <directionalLight\n        position={[10, 10, 5]}\n        intensity={1}\n        castShadow\n        shadow-mapSize-width={2048}\n        shadow-mapSize-height={2048}\n        shadow-camera-far={50}\n        shadow-camera-left={-10}\n        shadow-camera-right={10}\n        shadow-camera-top={10}\n        shadow-camera-bottom={-10}\n      />\n      \n      {/* Point light for dramatic effect */}\n      {(phase === 'impact' || phase === 'explosion') && (\n        <pointLight\n          position={asteroidPosition}\n          intensity={2}\n          color=\"#ff8800\"\n          distance={10}\n        />\n      )}\n\n      {/* Enhanced Earth */}\n      <EnhancedEarth\n        impactLocation={impactLocation}\n        showImpact={phase !== 'idle' && phase !== 'approaching'}\n        animationPhase={phase}\n        impactProgress={progress}\n      />\n\n      {/* Enhanced Asteroid */}\n      {asteroidData && phase !== 'complete' && (\n        <EnhancedAsteroid\n          asteroidData={asteroidData}\n          position={asteroidPosition}\n          animationPhase={phase}\n          animationProgress={progress}\n        />\n      )}\n\n      {/* Particle Effects */}\n      {(phase === 'impact' || phase === 'explosion' || phase === 'aftermath') && (\n        <SimpleParticleEffects\n          position={asteroidPosition}\n          animationPhase={phase}\n          animationProgress={progress}\n        />\n      )}\n\n      {/* Animation Status Overlay */}\n      <Html position={[0, 4, 0]}>\n        <div style={{\n          background: 'rgba(0, 0, 0, 0.8)',\n          color: 'white',\n          padding: '10px 15px',\n          borderRadius: '8px',\n          fontSize: '14px',\n          textAlign: 'center',\n          fontFamily: 'Arial, sans-serif',\n          border: '1px solid #333'\n        }}>\n          <div style={{ fontWeight: 'bold', marginBottom: '5px' }}>\n            Enhanced Impact Simulation\n          </div>\n          <div>Phase: <span style={{ color: '#ff6b35' }}>{phase}</span></div>\n          <div>Progress: <span style={{ color: '#ff6b35' }}>{(progress * 100).toFixed(1)}%</span></div>\n          {asteroidData && (\n            <div>Asteroid: <span style={{ color: '#ff6b35' }}>{asteroidData.name || 'Test Asteroid'}</span></div>\n          )}\n          {impactLocation && (\n            <div>\n              {(() => {\n                const lat = Number(impactLocation.lat);\n                const lng = Number(impactLocation.lng);\n                const latStr = Number.isFinite(lat) ? lat.toFixed(2) : 'N/A';\n                const lngStr = Number.isFinite(lng) ? lng.toFixed(2) : 'N/A';\n                return (\n                  <>\n                    Location: <span style={{ color: '#ff6b35' }}>{latStr}°, {lngStr}°</span>\n                  </>\n                );\n              })()}\n            </div>\n          )}\n        </div>\n      </Html>\n    </>\n  );\n};\n\n/**\n * Enhanced Impact 3D Component - Working Version\n */\nconst EnhancedImpact3D = ({ \n  simulationData = {}, \n  onAnimationComplete,\n  style = {} \n}) => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [error] = useState(null);\n\n  // Simulate loading time\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setIsLoading(false);\n    }, 1000);\n    \n    return () => clearTimeout(timer);\n  }, []);\n\n  if (error) {\n    return (\n      <div style={{ \n        height: '100%', \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center',\n        background: '#000',\n        color: '#fff',\n        fontSize: '16px'\n      }}>\n        <div>\n          <div style={{ marginBottom: '10px', color: '#ff4444' }}>⚠️ Error</div>\n          <div>{error}</div>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div style={{ \n        height: '100%', \n        display: 'flex', \n        alignItems: 'center', \n        justifyContent: 'center',\n        background: '#000',\n        color: '#fff',\n        fontSize: '16px'\n      }}>\n        <div style={{ textAlign: 'center' }}>\n          <div style={{ marginBottom: '10px', fontSize: '24px' }}>🚀</div>\n          <div>Loading Enhanced 3D...</div>\n          <div style={{ fontSize: '12px', color: '#888', marginTop: '5px' }}>\n            Initializing physics engine and shaders\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ height: '100%', width: '100%', position: 'relative', ...style }}>\n      <Canvas\n        camera={{ position: [5, 3, 5], fov: 60 }}\n        style={{ background: 'linear-gradient(to bottom, #000011 0%, #000033 100%)' }}\n        shadows\n        gl={{ antialias: true, alpha: false }}\n      >\n        <OrbitControls\n          enablePan={true}\n          enableZoom={true}\n          enableRotate={true}\n          maxDistance={20}\n          minDistance={2}\n          enableDamping\n          dampingFactor={0.05}\n        />\n        \n        <EnhancedImpactScene \n          simulationData={simulationData}\n          onAnimationComplete={onAnimationComplete}\n        />\n      </Canvas>\n      \n      {/* Performance indicator */}\n      <div style={{\n        position: 'absolute',\n        bottom: '10px',\n        right: '10px',\n        background: 'rgba(0, 0, 0, 0.7)',\n        color: '#ff6b35',\n        padding: '5px 10px',\n        borderRadius: '4px',\n        fontSize: '12px',\n        fontFamily: 'monospace'\n      }}>\n        Enhanced Mode: Active\n      </div>\n    </div>\n  );\n};\n\nexport default EnhancedImpact3D;\n"],"names":["EnhancedEarth","React","_ref","impactLocation","showImpact","animationPhase","impactProgress","materialSettings","earthRef","useRef","atmosphereRef","impactMarkerRef","cloudsRef","earthColorMap","earthNormalMap","earthClouds","useTexture","earthMaterial","useMemo","THREE","map","normalMap","roughness","metalness","atmosphereMaterial","color","transparent","opacity","side","impactMarkerPosition","lat","Math","PI","lng","radius","cos","sin","impactOrientation","normal","normalize","quat","setFromUnitVectors","useFrame","state","current","rotation","y","scale","clock","elapsedTime","setScalar","_jsxs","children","_jsx","ref","material","args","depthWrite","position","object","visible","quaternion","max","EnhancedAsteroid","_ref2","_asteroidData$estimat","_asteroidData$estimat2","asteroidData","animationProgress","asteroidRef","trailRef","asteroidSize","estimatedDiameter","kilometers","estimated_diameter_max","scaledSize","min","asteroidMaterial","bumpScale","trailMaterial","x","glowIntensity","emissive","setRGB","SimpleParticleEffects","_ref3","explosionRef","explosionScale","debrisParticles","particles","i","angle","random","push","particle","index","p","EnhancedImpactScene","_ref4","simulationData","onAnimationComplete","impactData","impactAngle","impactVelocity","animate","phase","progress","asteroidPosition","useEnhancedAnimation","onComplete","setPhase","useState","setProgress","setAsteroidPosition","targetPoint","z","startPoint","clone","multiplyScalar","useEffect","animationId","startTime","Date","now","animateStep","elapsed","newProgress","t","ease","pos","lerpVectors","requestAnimationFrame","cancelAnimationFrame","camera","useThree","lerp","lookAt","_Fragment","intensity","castShadow","distance","Html","style","background","padding","borderRadius","fontSize","textAlign","fontFamily","border","fontWeight","marginBottom","toFixed","name","Number","latStr","isFinite","lngStr","_ref5","isLoading","setIsLoading","error","timer","setTimeout","clearTimeout","height","display","alignItems","justifyContent","marginTop","_objectSpread","width","Canvas","fov","shadows","gl","antialias","alpha","OrbitControls","enablePan","enableZoom","enableRotate","maxDistance","minDistance","enableDamping","dampingFactor","bottom","right"],"sourceRoot":""}