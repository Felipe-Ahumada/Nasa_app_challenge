{"version":3,"file":"static/js/173.8b3552c1.chunk.js","mappings":"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","sources":["../node_modules/@react-three/drei/core/shapes.js","components/3D/Earth3D.js"],"sourcesContent":["import _extends from '@babel/runtime/helpers/esm/extends';\nimport * as React from 'react';\nimport * as THREE from 'three';\n\nfunction create(type, effect) {\n  const El = type + 'Geometry';\n  return /*#__PURE__*/React.forwardRef(({\n    args,\n    children,\n    ...props\n  }, fref) => {\n    const ref = React.useRef(null);\n    React.useImperativeHandle(fref, () => ref.current);\n    React.useLayoutEffect(() => void (effect == null ? void 0 : effect(ref.current)));\n    return /*#__PURE__*/React.createElement(\"mesh\", _extends({\n      ref: ref\n    }, props), /*#__PURE__*/React.createElement(El, {\n      attach: \"geometry\",\n      args: args\n    }), children);\n  });\n}\nconst Box = create('box');\nconst Circle = create('circle');\nconst Cone = create('cone');\nconst Cylinder = create('cylinder');\nconst Sphere = create('sphere');\nconst Plane = create('plane');\nconst Tube = create('tube');\nconst Torus = create('torus');\nconst TorusKnot = create('torusKnot');\nconst Tetrahedron = create('tetrahedron');\nconst Ring = create('ring');\nconst Polyhedron = create('polyhedron');\nconst Icosahedron = create('icosahedron');\nconst Octahedron = create('octahedron');\nconst Dodecahedron = create('dodecahedron');\nconst Extrude = create('extrude');\nconst Lathe = create('lathe');\nconst Capsule = create('capsule');\nconst Shape = create('shape', ({\n  geometry\n}) => {\n  // Calculate UVs (by https://discourse.threejs.org/u/prisoner849)\n  // https://discourse.threejs.org/t/custom-shape-in-image-not-working/49348/10\n  const pos = geometry.attributes.position;\n  const b3 = new THREE.Box3().setFromBufferAttribute(pos);\n  const b3size = new THREE.Vector3();\n  b3.getSize(b3size);\n  const uv = [];\n  let x = 0,\n    y = 0,\n    u = 0,\n    v = 0;\n  for (let i = 0; i < pos.count; i++) {\n    x = pos.getX(i);\n    y = pos.getY(i);\n    u = (x - b3.min.x) / b3size.x;\n    v = (y - b3.min.y) / b3size.y;\n    uv.push(u, v);\n  }\n  geometry.setAttribute('uv', new THREE.Float32BufferAttribute(uv, 2));\n});\n\nexport { Box, Capsule, Circle, Cone, Cylinder, Dodecahedron, Extrude, Icosahedron, Lathe, Octahedron, Plane, Polyhedron, Ring, Shape, Sphere, Tetrahedron, Torus, TorusKnot, Tube };\n","import React, { useRef, useEffect, useState } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Sphere, Html, useTexture } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Earth component with realistic textures\nconst Earth = ({ impactLocation, showImpact }) => {\n  const earthRef = useRef();\n  const impactRef = useRef();\n  \n  // Convert lat/lng to 3D coordinates on sphere\n  const latLngTo3D = (lat, lng, radius = 2) => {\n    const phi = (90 - lat) * (Math.PI / 180);\n    const theta = (lng + 180) * (Math.PI / 180);\n    \n    return {\n      x: -radius * Math.sin(phi) * Math.cos(theta),\n      y: radius * Math.cos(phi),\n      z: radius * Math.sin(phi) * Math.sin(theta)\n    };\n  };\n\n  const impactPosition = impactLocation ? latLngTo3D(impactLocation.lat, impactLocation.lng) : { x: 0, y: 0, z: 0 };\n\n  // Rotate Earth\n  useFrame(() => {\n    if (earthRef.current) {\n      earthRef.current.rotation.y += 0.001;\n    }\n  });\n\n  const [earthColorMap, earthNormalMap, earthClouds] = useTexture([\n    'https://threejs.org/examples/textures/planets/earth_atmos_2048.jpg',\n    'https://threejs.org/examples/textures/planets/earth_normal_2048.jpg',\n    'https://threejs.org/examples/textures/planets/earth_clouds_1024.png'\n  ]);\n\n  return (\n    <group>\n      {/* Earth */}\n      <Sphere ref={earthRef} args={[2, 64, 64]}>\n        <meshStandardMaterial\n          map={earthColorMap}\n          normalMap={earthNormalMap}\n          roughness={0.85}\n          metalness={0.0}\n        />\n      </Sphere>\n\n      {/* Clouds */}\n      <Sphere args={[2.03, 64, 64]}>\n        <meshPhongMaterial\n          map={earthClouds}\n          transparent\n          opacity={0.4}\n          depthWrite={false}\n        />\n      </Sphere>\n      \n      {/* Atmosphere */}\n      <Sphere args={[2.05, 64, 64]}>\n        <meshStandardMaterial\n          color=\"#87CEEB\"\n          transparent\n          opacity={0.2}\n          side={THREE.BackSide}\n        />\n      </Sphere>\n      \n      {/* Impact location marker */}\n      {showImpact && impactLocation && (\n        <group position={[impactPosition.x, impactPosition.y, impactPosition.z]}>\n          <Sphere ref={impactRef} args={[0.05, 16, 16]}>\n            <meshStandardMaterial\n              color=\"#ff4444\"\n              emissive=\"#ff2222\"\n              emissiveIntensity={0.5}\n            />\n          </Sphere>\n          \n          {/* Impact crater ring */}\n          <mesh rotation={[0, 0, 0]}>\n            <ringGeometry args={[0.1, 0.15, 32]} />\n            <meshStandardMaterial\n              color=\"#ff6666\"\n              transparent\n              opacity={0.7}\n              side={THREE.DoubleSide}\n            />\n          </mesh>\n        </group>\n      )}\n      \n      {/* Country/City labels could be added here */}\n    </group>\n  );\n};\n\n// Asteroid component\nconst Asteroid = ({ position, size = 0.1, velocity, isAnimating }) => {\n  const asteroidRef = useRef();\n  const [currentPosition, setCurrentPosition] = useState(position);\n\n  useFrame((state, delta) => {\n    if (asteroidRef.current && isAnimating && velocity) {\n      // Animate asteroid movement towards Earth\n      const direction = new THREE.Vector3(0, 0, 0).sub(new THREE.Vector3(...currentPosition)).normalize();\n      const newPos = new THREE.Vector3(...currentPosition).add(direction.multiplyScalar(velocity * delta));\n      \n      setCurrentPosition([newPos.x, newPos.y, newPos.z]);\n      asteroidRef.current.position.copy(newPos);\n      \n      // Add rotation\n      asteroidRef.current.rotation.x += 0.01;\n      asteroidRef.current.rotation.y += 0.02;\n    }\n  });\n\n  return (\n    <group position={currentPosition}>\n      <mesh ref={asteroidRef}>\n        {/* Irregular asteroid shape */}\n        <dodecahedronGeometry args={[size, 1]} />\n        <meshStandardMaterial\n          color=\"#8B4513\"\n          roughness={0.9}\n          metalness={0.1}\n        />\n      </mesh>\n      \n      {/* Asteroid trail */}\n      {isAnimating && (\n        <mesh>\n          <cylinderGeometry args={[0.002, 0.01, 1, 8]} />\n          <meshStandardMaterial\n            color=\"#ffaa00\"\n            transparent\n            opacity={0.6}\n            emissive=\"#ff6600\"\n            emissiveIntensity={0.3}\n          />\n        </mesh>\n      )}\n    </group>\n  );\n};\n\n// Impact explosion effect\nconst ImpactExplosion = ({ position, isVisible, intensity = 1 }) => {\n  const explosionRef = useRef();\n  const [scale, setScale] = useState(0);\n\n  useFrame((state, delta) => {\n    if (isVisible && explosionRef.current) {\n      const newScale = scale + delta * 2;\n      setScale(newScale);\n      explosionRef.current.scale.setScalar(Math.min(newScale, intensity));\n      \n      // Fade out\n      if (explosionRef.current.material) {\n        explosionRef.current.material.opacity = Math.max(0, 1 - (newScale / intensity));\n      }\n    }\n  });\n\n  if (!isVisible) return null;\n\n  return (\n    <group position={position}>\n      <Sphere ref={explosionRef} args={[0.1, 16, 16]}>\n        <meshStandardMaterial\n          color=\"#ff4400\"\n          transparent\n          opacity={1}\n          emissive=\"#ff6600\"\n          emissiveIntensity={2}\n        />\n      </Sphere>\n      \n      {/* Shockwave rings */}\n      {[1, 2, 3].map((ring, index) => (\n        <mesh key={index} rotation={[Math.PI / 2, 0, 0]}>\n          <ringGeometry args={[0.2 + index * 0.1, 0.25 + index * 0.1, 32]} />\n          <meshStandardMaterial\n            color=\"#ffaa00\"\n            transparent\n            opacity={0.5 - index * 0.1}\n            side={THREE.DoubleSide}\n          />\n        </mesh>\n      ))}\n    </group>\n  );\n};\n\n// Main Earth3D component\nconst Earth3D = ({ \n  impactLocation, \n  asteroidData, \n  showImpact = false, \n  animateImpact = false,\n  onAnimationComplete \n}) => {\n  const [showExplosion, setShowExplosion] = useState(false);\n  const [asteroidPosition, setAsteroidPosition] = useState([8, 4, 6]);\n\n  useEffect(() => {\n    if (animateImpact) {\n      // Reset animation\n      setShowExplosion(false);\n      setAsteroidPosition([8, 4, 6]);\n      \n      // Trigger explosion after delay\n      const timer = setTimeout(() => {\n        setShowExplosion(true);\n        if (onAnimationComplete) onAnimationComplete();\n      }, 3000);\n      \n      return () => clearTimeout(timer);\n    }\n  }, [animateImpact, onAnimationComplete]);\n\n  const asteroidSize = asteroidData?.diameter ? \n    Math.max(0.05, Math.min(0.3, asteroidData.diameter / 10000)) : 0.1;\n\n  return (\n    <div style={{ width: '100%', height: '400px', borderRadius: '12px', overflow: 'hidden' }}>\n      <Canvas camera={{ position: [0, 0, 8], fov: 45 }}>\n        {/* Lighting */}\n        <ambientLight intensity={0.3} />\n        <directionalLight position={[5, 5, 5]} intensity={1} castShadow />\n        <pointLight position={[-5, -5, -5]} intensity={0.5} color=\"#4A90E2\" />\n        \n        {/* Earth */}\n        <Earth impactLocation={impactLocation} showImpact={showImpact} />\n        \n        {/* Asteroid */}\n        {asteroidData && (\n          <Asteroid\n            position={asteroidPosition}\n            size={asteroidSize}\n            velocity={animateImpact ? 2 : 0}\n            isAnimating={animateImpact}\n          />\n        )}\n        \n        {/* Impact explosion */}\n        {showImpact && impactLocation && (\n          <ImpactExplosion\n            position={impactLocation ? [\n              latLngTo3D(impactLocation.lat, impactLocation.lng).x,\n              latLngTo3D(impactLocation.lat, impactLocation.lng).y,\n              latLngTo3D(impactLocation.lat, impactLocation.lng).z\n            ] : [0, 0, 0]}\n            isVisible={showExplosion}\n            intensity={asteroidSize * 10}\n          />\n        )}\n        \n        {/* Controls */}\n        <OrbitControls\n          enableZoom={true}\n          enablePan={true}\n          enableRotate={true}\n          minDistance={3}\n          maxDistance={15}\n          autoRotate={!animateImpact}\n          autoRotateSpeed={0.5}\n        />\n        \n        {/* Info overlay */}\n        {asteroidData && (\n          <Html position={[3, 3, 0]}>\n            <div style={{\n              background: 'rgba(0, 0, 0, 0.8)',\n              color: 'white',\n              padding: '10px',\n              borderRadius: '8px',\n              fontSize: '12px',\n              minWidth: '200px'\n            }}>\n              <h6 style={{ margin: '0 0 8px 0', color: '#00d4ff' }}>\n                {asteroidData.name || 'Selected Asteroid'}\n              </h6>\n              {asteroidData.diameter && (\n                <div>Diameter: {(asteroidData.diameter / 1000).toFixed(2)} km</div>\n              )}\n              {asteroidData.velocity && (\n                <div>Velocity: {asteroidData.velocity.toFixed(2)} km/s</div>\n              )}\n              {asteroidData.mass && (\n                <div>Mass: {asteroidData.mass.toExponential(2)} kg</div>\n              )}\n            </div>\n          </Html>\n        )}\n        \n        {/* Instructions */}\n        <Html position={[-4, -3, 0]}>\n          <div style={{\n            color: '#cccccc',\n            fontSize: '11px',\n            background: 'rgba(0, 0, 0, 0.6)',\n            padding: '8px',\n            borderRadius: '4px'\n          }}>\n            🖱️ Drag to rotate • 🔍 Scroll to zoom • 📍 Impact location marked in red\n          </div>\n        </Html>\n      </Canvas>\n    </div>\n  );\n};\n\n// Helper function (defined outside component to avoid re-creation)\nconst latLngTo3D = (lat, lng, radius = 2) => {\n  const phi = (90 - lat) * (Math.PI / 180);\n  const theta = (lng + 180) * (Math.PI / 180);\n  \n  return {\n    x: -radius * Math.sin(phi) * Math.cos(theta),\n    y: radius * Math.cos(phi),\n    z: radius * Math.sin(phi) * Math.sin(theta)\n  };\n};\n\nexport default Earth3D;\n"],"names":["create","type","effect","El","React","_ref","fref","args","children","props","_objectWithoutProperties","_excluded","ref","current","_extends","attach","Sphere","_ref2","geometry","pos","attributes","position","b3","THREE","setFromBufferAttribute","b3size","getSize","uv","x","y","u","v","i","count","getX","getY","min","push","setAttribute","Earth","impactLocation","showImpact","earthRef","useRef","impactRef","impactPosition","lat","lng","radius","arguments","length","undefined","phi","Math","PI","theta","sin","cos","z","latLngTo3D","useFrame","rotation","earthColorMap","earthNormalMap","earthClouds","useTexture","_jsxs","_jsx","map","normalMap","roughness","metalness","transparent","opacity","depthWrite","color","side","emissive","emissiveIntensity","Asteroid","size","velocity","isAnimating","asteroidRef","currentPosition","setCurrentPosition","useState","state","delta","direction","sub","normalize","newPos","add","multiplyScalar","copy","ImpactExplosion","_ref3","isVisible","intensity","explosionRef","scale","setScale","newScale","setScalar","material","max","ring","index","_ref4","asteroidData","animateImpact","onAnimationComplete","showExplosion","setShowExplosion","asteroidPosition","setAsteroidPosition","useEffect","timer","setTimeout","clearTimeout","asteroidSize","diameter","style","width","height","borderRadius","overflow","Canvas","camera","fov","castShadow","OrbitControls","enableZoom","enablePan","enableRotate","minDistance","maxDistance","autoRotate","autoRotateSpeed","Html","background","padding","fontSize","minWidth","margin","name","toFixed","mass","toExponential"],"sourceRoot":""}