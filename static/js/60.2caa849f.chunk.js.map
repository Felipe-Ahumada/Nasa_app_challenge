{"version":3,"file":"static/js/60.2caa849f.chunk.js","mappings":"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","sources":["components/3D/Impact3D.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls, Html } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Impact crater component\nconst ImpactCrater = ({ position, size, depth = 0.1 }) => {\n  const craterRef = useRef();\n  \n  useFrame((state) => {\n    if (craterRef.current) {\n      // Subtle pulsing effect\n      craterRef.current.scale.setScalar(1 + Math.sin(state.clock.elapsedTime * 2) * 0.05);\n    }\n  });\n\n  return (\n    <group position={position} ref={craterRef}>\n      {/* Main crater */}\n      <mesh rotation={[-Math.PI / 2, 0, 0]}>\n        <cylinderGeometry args={[size, size * 0.7, depth, 32]} />\n        <meshStandardMaterial\n          color=\"#654321\"\n          roughness={0.9}\n          transparent\n          opacity={0.8}\n        />\n      </mesh>\n      \n      {/* Crater rim */}\n      <mesh rotation={[-Math.PI / 2, 0, 0]}>\n        <ringGeometry args={[size * 0.9, size * 1.2, 32]} />\n        <meshStandardMaterial\n          color=\"#8B4513\"\n          roughness={0.7}\n          side={THREE.DoubleSide}\n        />\n      </mesh>\n      \n      {/* Debris field */}\n      {[...Array(10)].map((_, i) => {\n        const angle = (i / 10) * Math.PI * 2;\n        const distance = size * (1.5 + Math.random() * 0.5);\n        const debrisPos = [\n          Math.cos(angle) * distance,\n          Math.random() * 0.1,\n          Math.sin(angle) * distance\n        ];\n        \n        return (\n          <mesh key={i} position={debrisPos} scale={Math.random() * 0.05 + 0.02}>\n            <dodecahedronGeometry />\n            <meshStandardMaterial color=\"#444444\" />\n          </mesh>\n        );\n      })}\n    </group>\n  );\n};\n\n// Shockwave animation component\nconst Shockwave = ({ isActive, intensity = 1 }) => {\n  const [waves, setWaves] = useState([]);\n  const wavesRef = useRef([]);\n\n  useEffect(() => {\n    if (isActive) {\n      // Create multiple shockwave rings\n      const newWaves = [\n        { id: 1, startTime: 0, maxRadius: 2 * intensity },\n        { id: 2, startTime: 0.5, maxRadius: 3 * intensity },\n        { id: 3, startTime: 1, maxRadius: 4 * intensity }\n      ];\n      setWaves(newWaves);\n    } else {\n      setWaves([]);\n    }\n  }, [isActive, intensity]);\n\n  useFrame((state) => {\n    wavesRef.current.forEach((waveRef, index) => {\n      if (waveRef && waves[index]) {\n        const wave = waves[index];\n        const elapsed = state.clock.elapsedTime - wave.startTime;\n        const progress = Math.max(0, Math.min(1, elapsed / 3));\n        \n        if (progress > 0 && progress < 1) {\n          const radius = progress * wave.maxRadius;\n          waveRef.scale.set(radius, 1, radius);\n          waveRef.material.opacity = (1 - progress) * 0.6;\n        } else {\n          waveRef.scale.set(0, 0, 0);\n        }\n      }\n    });\n  });\n\n  return (\n    <group>\n      {waves.map((wave, index) => (\n        <mesh\n          key={wave.id}\n          ref={el => wavesRef.current[index] = el}\n          rotation={[-Math.PI / 2, 0, 0]}\n        >\n          <ringGeometry args={[0.8, 1, 32]} />\n          <meshStandardMaterial\n            color=\"#ff6600\"\n            transparent\n            opacity={0.6}\n            emissive=\"#ff4400\"\n            emissiveIntensity={0.5}\n            side={THREE.DoubleSide}\n          />\n        </mesh>\n      ))}\n    </group>\n  );\n};\n\n// Debris cloud component\nconst DebrisCloud = ({ isActive, intensity = 1 }) => {\n  const debrisRef = useRef();\n  const particlesRef = useRef([]);\n  const [particles] = useState(() => {\n    return [...Array(50)].map((_, i) => ({\n      id: i,\n      initialPosition: [\n        (Math.random() - 0.5) * 0.5,\n        (Math.random() - 0.5) * 0.5,\n        (Math.random() - 0.5) * 0.5\n      ],\n      velocity: [\n        (Math.random() - 0.5) * 2,\n        Math.random() * 3 + 1,\n        (Math.random() - 0.5) * 2\n      ],\n      size: Math.random() * 0.02 + 0.01,\n      color: Math.random() > 0.5 ? \"#ff4400\" : \"#ffaa00\"\n    }));\n  });\n\n  useFrame((state, delta) => {\n    if (isActive && particlesRef.current) {\n      particlesRef.current.forEach((particleRef, index) => {\n        if (particleRef && particles[index]) {\n          const particle = particles[index];\n          const elapsed = state.clock.elapsedTime;\n          \n          // Update position based on velocity and gravity\n          const newY = particle.initialPosition[1] + \n            particle.velocity[1] * elapsed - \n            0.5 * 9.8 * Math.pow(elapsed, 2) * 0.1;\n          \n          particleRef.position.set(\n            particle.initialPosition[0] + particle.velocity[0] * elapsed,\n            Math.max(-2, newY),\n            particle.initialPosition[2] + particle.velocity[2] * elapsed\n          );\n          \n          // Fade out over time\n          if (particleRef.material) {\n            particleRef.material.opacity = Math.max(0, 1 - elapsed / 5);\n          }\n        }\n      });\n    }\n  });\n\n  if (!isActive) return null;\n\n  return (\n    <group ref={debrisRef}>\n      {particles.map((particle, index) => (\n        <mesh\n          key={particle.id}\n          ref={el => particlesRef.current[index] = el}\n          position={particle.initialPosition}\n          scale={particle.size}\n        >\n          <sphereGeometry args={[1, 8, 8]} />\n          <meshStandardMaterial\n            color={particle.color}\n            emissive={particle.color}\n            emissiveIntensity={0.3}\n            transparent\n            opacity={1}\n          />\n        </mesh>\n      ))}\n    </group>\n  );\n};\n\n// Ground impact visualization\nconst GroundImpact = ({ position, impactData }) => {\n  const [showEffects, setShowEffects] = useState(false);\n  const [effectsIntensity, setEffectsIntensity] = useState(1);\n\n  useEffect(() => {\n    if (impactData) {\n      setShowEffects(true);\n      // Calculate effects intensity based on impact data\n      const energy = impactData.kineticEnergy || 1e15;\n      setEffectsIntensity(Math.min(3, Math.max(0.5, energy / 1e15)));\n    }\n  }, [impactData]);\n\n  return (\n    <group position={position}>\n      {/* Ground plane */}\n      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0, -0.1, 0]}>\n        <planeGeometry args={[20, 20]} />\n        <meshStandardMaterial\n          color=\"#2d5016\"\n          roughness={0.9}\n        />\n      </mesh>\n      \n      {/* Impact crater */}\n      {showEffects && (\n        <ImpactCrater\n          position={[0, 0, 0]}\n          size={0.3 * effectsIntensity}\n          depth={0.1 * effectsIntensity}\n        />\n      )}\n      \n      {/* Shockwave */}\n      <Shockwave isActive={showEffects} intensity={effectsIntensity} />\n      \n      {/* Debris cloud */}\n      <DebrisCloud isActive={showEffects} intensity={effectsIntensity} />\n      \n      {/* Fireball */}\n      {showEffects && (\n        <mesh position={[0, 0.5, 0]}>\n          <sphereGeometry args={[0.3 * effectsIntensity, 16, 16]} />\n          <meshStandardMaterial\n            color=\"#ff4400\"\n            emissive=\"#ff6600\"\n            emissiveIntensity={2}\n            transparent\n            opacity={0.8}\n          />\n        </mesh>\n      )}\n    </group>\n  );\n};\n\n// Impact statistics display\nconst ImpactStats = ({ impactData, position }) => {\n  if (!impactData) return null;\n\n  const {\n    kineticEnergy = 0,\n    craterDiameter = 0,\n    earthquakeMagnitude = 0,\n    casualties = {},\n    economicDamage = 0\n  } = impactData;\n\n  return (\n    <Html position={position}>\n      <div style={{\n        background: 'rgba(0, 0, 0, 0.9)',\n        color: '#ffffff',\n        padding: '16px',\n        borderRadius: '12px',\n        fontSize: '13px',\n        minWidth: '280px',\n        border: '2px solid #ff4400',\n        boxShadow: '0 0 20px rgba(255, 68, 0, 0.3)'\n      }}>\n        <h6 style={{ \n          margin: '0 0 12px 0', \n          color: '#ff6600',\n          textAlign: 'center',\n          textTransform: 'uppercase',\n          letterSpacing: '1px'\n        }}>\n          🔥 IMPACT ANALYSIS 🔥\n        </h6>\n        \n        <div style={{ display: 'grid', gap: '6px' }}>\n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <span>⚡ Kinetic Energy:</span>\n            <span style={{ color: '#ffaa00' }}>\n              {(kineticEnergy / 1e15).toFixed(2)} PJ\n            </span>\n          </div>\n          \n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <span>🕳️ Crater Diameter:</span>\n            <span style={{ color: '#ffaa00' }}>\n              {(craterDiameter / 1000).toFixed(2)} km\n            </span>\n          </div>\n          \n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <span>🌍 Earthquake:</span>\n            <span style={{ color: '#ffaa00' }}>\n              Magnitude {earthquakeMagnitude.toFixed(1)}\n            </span>\n          </div>\n          \n          <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n            <span>💰 Economic Damage:</span>\n            <span style={{ color: '#ff4444' }}>\n              ${(economicDamage / 1e9).toFixed(1)}B\n            </span>\n          </div>\n          \n          {casualties.total && (\n            <div style={{ \n              marginTop: '8px', \n              padding: '8px', \n              background: 'rgba(255, 68, 68, 0.2)',\n              borderRadius: '6px',\n              textAlign: 'center'\n            }}>\n              <div style={{ color: '#ff4444', fontWeight: 'bold' }}>\n                ⚠️ Estimated Casualties\n              </div>\n              <div style={{ color: '#ffcccc', fontSize: '12px' }}>\n                {casualties.total.toLocaleString()} people affected\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </Html>\n  );\n};\n\n// Main Impact3D component\nconst Impact3D = ({ \n  impactData, \n  asteroidData, \n  animate = false,\n  onAnimationComplete \n}) => {\n  const [animationPhase, setAnimationPhase] = useState('approach'); // approach, impact, aftermath\n  const [showImpact, setShowImpact] = useState(false);\n\n  useEffect(() => {\n    if (animate) {\n      setAnimationPhase('approach');\n      setShowImpact(false);\n      \n      // Sequence the animation\n      const approachTimer = setTimeout(() => {\n        setAnimationPhase('impact');\n        setShowImpact(true);\n      }, 2000);\n      \n      const aftermathTimer = setTimeout(() => {\n        setAnimationPhase('aftermath');\n        if (onAnimationComplete) onAnimationComplete();\n      }, 5000);\n      \n      return () => {\n        clearTimeout(approachTimer);\n        clearTimeout(aftermathTimer);\n      };\n    }\n  }, [animate, onAnimationComplete]);\n\n  return (\n    <div style={{ \n      width: '100%', \n      height: '600px', \n      borderRadius: '12px', \n      overflow: 'hidden',\n      background: 'linear-gradient(135deg, #0a0a0a 0%, #2d1810 100%)',\n      position: 'relative'\n    }}>\n      <Canvas camera={{ position: [0, 3, 8], fov: 60 }}>\n        {/* Enhanced lighting for dramatic effect */}\n        <ambientLight intensity={0.2} />\n        <directionalLight \n          position={[10, 10, 5]} \n          intensity={1.2} \n          castShadow \n          shadow-mapSize-width={2048}\n          shadow-mapSize-height={2048}\n        />\n        <pointLight position={[0, 5, 0]} intensity={0.5} color=\"#ff6600\" />\n        \n        {/* Ground impact scene */}\n        <GroundImpact \n          position={[0, 0, 0]} \n          impactData={showImpact ? impactData : null}\n        />\n        \n        {/* Approaching asteroid (only during approach phase) */}\n        {animationPhase === 'approach' && asteroidData && (\n          <mesh position={[5, 3, 5]}>\n            <dodecahedronGeometry args={[0.1, 1]} />\n            <meshStandardMaterial\n              color=\"#8B4513\"\n              emissive=\"#ff4400\"\n              emissiveIntensity={0.2}\n            />\n          </mesh>\n        )}\n        \n        {/* Impact statistics */}\n        <ImpactStats \n          impactData={impactData}\n          position={[4, 2, 0]}\n        />\n        \n        {/* Environment */}\n        <mesh position={[0, -5, 0]} rotation={[-Math.PI / 2, 0, 0]}>\n          <planeGeometry args={[100, 100]} />\n          <meshStandardMaterial color=\"#1a1a0a\" />\n        </mesh>\n        \n        {/* Sky dome */}\n        <mesh>\n          <sphereGeometry args={[50, 32, 32]} />\n          <meshBasicMaterial \n            color={animationPhase === 'impact' ? \"#ff2200\" : \"#000822\"} \n            side={THREE.BackSide}\n            transparent\n            opacity={0.8}\n          />\n        </mesh>\n        \n        {/* Controls */}\n        <OrbitControls\n          enableZoom={true}\n          enablePan={true}\n          enableRotate={true}\n          minDistance={3}\n          maxDistance={25}\n          maxPolarAngle={Math.PI / 2}\n          target={[0, 0, 0]}\n        />\n        \n        {/* Instructions */}\n        <Html position={[-6, -2, 0]}>\n          <div style={{\n            color: '#cccccc',\n            fontSize: '11px',\n            background: 'rgba(0, 0, 0, 0.7)',\n            padding: '8px',\n            borderRadius: '4px',\n            maxWidth: '200px'\n          }}>\n            <div style={{ color: '#ff6600', fontWeight: 'bold', marginBottom: '4px' }}>\n              🎬 Impact Simulation\n            </div>\n            <div>Phase: {animationPhase.toUpperCase()}</div>\n            <div style={{ marginTop: '8px', fontSize: '10px' }}>\n              🖱️ Drag to rotate view<br/>\n              🔍 Scroll to zoom<br/>\n              📊 Statistics panel on right\n            </div>\n          </div>\n        </Html>\n      </Canvas>\n      \n      {/* Animation phase indicator */}\n      <div style={{\n        position: 'absolute',\n        top: '20px',\n        left: '20px',\n        background: 'rgba(0, 0, 0, 0.8)',\n        color: '#ffffff',\n        padding: '12px',\n        borderRadius: '8px',\n        border: '2px solid #ff6600'\n      }}>\n        <div style={{ fontWeight: 'bold', color: '#ff6600' }}>\n          Animation Phase\n        </div>\n        <div style={{ textTransform: 'capitalize', fontSize: '14px' }}>\n          {animationPhase}\n        </div>\n        {animate && (\n          <div style={{ fontSize: '10px', color: '#cccccc', marginTop: '4px' }}>\n            {animationPhase === 'approach' && '🚀 Asteroid approaching...'}\n            {animationPhase === 'impact' && '💥 Impact in progress!'}\n            {animationPhase === 'aftermath' && '🔥 Analyzing consequences...'}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Impact3D;\n"],"names":["ImpactCrater","_ref","position","size","depth","craterRef","useRef","useFrame","state","current","scale","setScalar","Math","sin","clock","elapsedTime","_jsxs","ref","children","rotation","PI","_jsx","args","color","roughness","transparent","opacity","side","THREE","Array","map","_","i","angle","distance","random","debrisPos","cos","Shockwave","_ref2","isActive","intensity","waves","setWaves","useState","wavesRef","useEffect","id","startTime","maxRadius","forEach","waveRef","index","wave","elapsed","progress","max","min","radius","set","material","el","emissive","emissiveIntensity","DebrisCloud","_ref3","debrisRef","particlesRef","particles","initialPosition","velocity","delta","particleRef","particle","newY","pow","GroundImpact","_ref4","impactData","showEffects","setShowEffects","effectsIntensity","setEffectsIntensity","energy","kineticEnergy","ImpactStats","_ref5","craterDiameter","earthquakeMagnitude","casualties","economicDamage","Html","style","background","padding","borderRadius","fontSize","minWidth","border","boxShadow","margin","textAlign","textTransform","letterSpacing","display","gap","justifyContent","toFixed","total","marginTop","fontWeight","toLocaleString","_ref6","asteroidData","animate","onAnimationComplete","animationPhase","setAnimationPhase","showImpact","setShowImpact","approachTimer","setTimeout","aftermathTimer","clearTimeout","width","height","overflow","Canvas","camera","fov","castShadow","OrbitControls","enableZoom","enablePan","enableRotate","minDistance","maxDistance","maxPolarAngle","target","maxWidth","marginBottom","toUpperCase","top","left"],"sourceRoot":""}